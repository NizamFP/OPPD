
//BLYNKDEACT
/* 
Fill-in information from Blynk Device Info here 
#define BLYNK_TEMPLATE_ID           "TMPL6Jwp3nNpe"
#define BLYNK_TEMPLATE_NAME         "OPPD"
#define BLYNK_AUTH_TOKEN            "rV98KC5X3fSip9v-gp8VLr0kFCHCLA2Y"

// Comment this out to disable prints and save space 
#define BLYNK_PRINT Serial


#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
*/ 
//BLYNKDEACT

#include <OneWire.h>
#include <Adafruit_SSD1306.h> // Memanggil Library OLED SSD1306
#include <DallasTemperature.h>
const int oneWireBus = 4;     
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

#include <DHT.h>
#include <LiquidCrystal_I2C.h>
#define DHT11_PIN 14
LiquidCrystal_I2C lcd(0x27, 16, 2);
DHT dht11(DHT11_PIN, DHT11);

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#define DMSpin  13     // pin output untuk DMS
#define indikator  2   // pin led indikator built-in ESP32
#define adcPin 34      // pin input sensor pH tanah
#define SCREEN_WIDTH 128 // Lebar Oled dalam Pixel
#define SCREEN_HEIGHT 32 // Tinggi Oled dalam Pixel
//#include <Adafruit_SSD1306.h>
//variabel     
#define OLED_RESET     4 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
int ADC;
float lastReading;
float pH;


const int AirValue = 1023;   //you need to replace this value with Value_1
const int WaterValue = 440;  //you need to replace this value with Value_2
const int SensorPin = 15;
int soilMoistureValue = 0;
int soilmoisturepercent=0;
int _moisture,sensor_analog;
const int sensor_pin = A0;  /* Soil moisture sensor O/P pin */

// Your WiFi credentials.
// Set password to "" for open networks.
// BLYNKDEACT (DELETE THIS STAR WHEN TESTING BLYNK, THIS IS UNACTIVATED TO SAVE MESSAGES)
/* 
char ssid[] = "1234";
char pass[] = "nfp12347";
BlynkTimer timer;

// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V0)
{
  // Set incoming value from pin V0 to a variable
  int value = param.asInt();

  // Update state
  Blynk.virtualWrite(V1, value);
}

// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
  // Change Web Link Button message to "Congratulations!"
  Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
  Blynk.setProperty(V3, "onImageUrl",  "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
  Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V2, millis() / 1000);
}
*/
//BLYNKDEACT
void setup(){
  // Debug console
  Serial.begin(115200);
  sensors.begin();
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // alamat I2C 0x3C untuk 128x32
  Serial.println(F("SSD1306 Gagal"));
    for(;;); // mengulang terus, hingga bisa menghubungkan ke I2C Oled
  }
  //BLYNKDEACT
  //Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  // You can also specify server:
  //Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, "blynk.cloud", 80);
  //Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, IPAddress(192,168,1,100), 8080);

  // Setup a function to be called every second
  // BLYNKDEACT
  //timer.setInterval(1000L, myTimerEvent);
  dht11.begin();
  lcd.begin();
  lcd.backlight();
  analogReadResolution(10);      // setting resolusi pembacaan ADC menjadi 10 bit
  pinMode(DMSpin, OUTPUT);
  pinMode(indikator, OUTPUT);
  digitalWrite(DMSpin,HIGH);     // non-aktifkan DMS
}

unsigned long previousMillis = 0; // Declare previousMillis at the top
const long interval = 3000;       // Set your desired interval (in milliseconds)

void loop() {
  digitalWrite(DMSpin,LOW);      // aktifkan DMS
  digitalWrite(indikator, HIGH); // led indikator built-in ESP32 menyala
  delay(1*1000);                // wait DMS capture data
  ADC = analogRead(adcPin); 

  display.clearDisplay();                 //Membersihkan tampilan
  display.setTextSize(1);                 //Ukuran tulisan
  display.setTextColor(SSD1306_WHITE);
  // BLYNKDEACT
  /*
  Blynk.run();
  timer.run();
  */
  sensors.requestTemperatures(); 
  float temperatureC = sensors.getTempCByIndex(0);
  float humi = dht11.readHumidity();
  float tempC = 25;
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    float humi = dht11.readHumidity();
    float tempC = dht11.readTemperature();
    Serial.print("Temperature: ");
    //BLYNKDEACT
    //Blynk.virtualWrite(V11, tempC);
    Serial.print(tempC, 1);
    Serial.print(" °C, Humidity: ");
    //BLYNKDEACT
    //Blynk.virtualWrite(V10, humi);
    Serial.print(humi, 0);
    Serial.println(" %");
    lcd.clear();

  if (isnan(tempC) || isnan(humi)) {
    display.setCursor(0,0);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.println(F("Failed"));       
  } 
  else {
    display.setCursor(0,0);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.print(F("Temp: "));      
    display.print(tempC, 1);  
    display.print(F("C"));
    lcd.setCursor(0, 0);
    lcd.print("T:");
    lcd.print(tempC, 1);
 
    display.setCursor(74,0);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.print(F("Humi: "));       
    display.print(humi, 0);  
    display.print(F("%"));
    lcd.setCursor(0, 1);
    lcd.print("H:");
    lcd.print(humi, 0);
    lcd.print("%");

    
  }
  soilMoistureValue = analogRead(sensor_pin);

  //soilMoistureValue = analogRead(SensorPin);  //put Sensor insert into soil
  Serial.println(soilMoistureValue);
  soilmoisturepercent = map(soilMoistureValue, AirValue, WaterValue, 0, 100);

  if(soilmoisturepercent > 100) {
    Serial.print("Moisture: ");
    Serial.println("100 %");
    display.setCursor(0,8);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.print(F("Mois: "));       
    display.print("100");  
    display.print(F("%"));
    lcd.setCursor(8, 0);
    lcd.print("M:");
    lcd.print("100%");
  }

  else if(soilmoisturepercent <0) {
    Serial.print("Moisture: ");
    Serial.println("0%");
    display.setCursor(0,8);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.print(F("Mois: "));       
    display.print("0");  
    display.print(F("%"));
    lcd.setCursor(8, 0);
    lcd.print("M:");
    lcd.print("0%");
  }
  else if (soilmoisturepercent >=0 && soilmoisturepercent <= 100) {
    Serial.print("Moisture: ");
    Serial.print(soilmoisturepercent);
    Serial.println("%");
    display.setCursor(0,8);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
    display.print(F("Mois: "));       
    display.print(soilmoisturepercent);  
    display.print(F("%"));
    lcd.setCursor(8, 0);
    lcd.print("M:");
    lcd.print(soilmoisturepercent);
    lcd.print("%");
  }
  

/***************************************************************
 *  Setelah anda melakukan proses kalibrasi dengan benar 
 *  dan mencari rumus kalibrasi menggunakan regresi linier excel
 *  maka nilai rumus regresi dibawah ini gantilah dengan nilai
 *  rumus regresi yang anda dapatkan
 ***************************************************************/
  
  pH = (-0.0233 * ADC) + 12.698;  // ini adalah rumus regresi linier yang wajib anda ganti!
    if (pH != lastReading) { 
    lastReading = pH; 
    }
  Serial.print("ADC=");
  Serial.print(ADC);             // menampilkan nilai ADC di serial monitor pada baudrate 115200
  Serial.print(" pH=");
  Serial.println(lastReading,1); // menampilkan nilai pH di serial monitor pada baudrate 115200

  display.setCursor(0,16);                 // Koordinat awal tulisan (x,y) dimulai dari atas-kiri
  display.print(F("pH: "));       
  display.print(lastReading,1);  
  lcd.setCursor(7, 1);
  lcd.print("pH:");
  lcd.print(lastReading,1);

  digitalWrite(DMSpin,HIGH);
  digitalWrite(indikator,LOW);  

  Serial.print(temperatureC);
  Serial.println("ºC");
  display.display();
  delay(2000);
  }
}
